1Ô∏è‚É£ Preparar tu entorno

Siempre empieza en tu rama principal:

git checkout main         # Cambia a la rama principal
git pull origin main --rebase   # Actualiza tu local con lo √∫ltimo del remoto


üí° Tip: Siempre usar --rebase evita commits duplicados y mantiene tu historial limpio.

2Ô∏è‚É£ Trabajar y guardar cambios

Ver qu√© cambios hay:

git status


A√±adir cambios al ‚Äústaging‚Äù:

git add .           # A√±ade todos los archivos modificados
# o
git add archivo.txt # A√±ade solo un archivo espec√≠fico


Crear un commit:

git commit -m "Mensaje claro y descriptivo"

3Ô∏è‚É£ Subir cambios al remoto
git push origin main


Si Git te dice que el remoto tiene cambios nuevos:

git pull origin main --rebase
git push origin main

4Ô∏è‚É£ Guardar cambios temporales (stash)

Si necesitas actualizar tu rama sin comprometer tus cambios a medio hacer:

git stash push -m "Descripci√≥n de lo que guardo"
git pull origin main --rebase
git stash pop


stash push ‚Üí guarda tus cambios.

stash pop ‚Üí los recupera despu√©s de actualizar.

5Ô∏è‚É£ Revisar tu repositorio
git status       # Estado actual de la rama
git log --oneline  # Historial resumido de commits
git diff         # Diferencias de tus cambios no a√±adidos

6Ô∏è‚É£ Problemas comunes

Conflictos al hacer rebase:
Edita los archivos, haz git add archivo y luego:

git rebase --continue


Abortar rebase si te has confundido:

git rebase --abort


Cancelar cambios no deseados en un archivo:

git restore archivo.txt


üí° Regla de oro:

pull --rebase

Trabaja + add + commit

push

Sigue este orden y GitHub siempre tendr√° lo mismo que tu local, sin sobrescribir nada.